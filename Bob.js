const crypto = require('crypto');

// Bob's private and public key
const bobPrivateKey = crypto.createPrivateKey(`-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDlECagz0GoYUDc
ysvQkVxOGeq4b+RZmGcymelGz6Qz1pjmmPALQvJzvhuHgsmtUTCC/EbodKhaC1kb
Fn5DlRWDPI1vkTB2F73JWwa9RlcO7/bdCt+xso2CYrZ2Ix8EJ4rrKUOSfJhMdGw5
K8VxRqWfk+CvEnDp9vm0oEPSsPlRqDtmtb5e/pwRcYhozM/WD0bzbaQAAGh40E8b
e2+qiDb6tdKjwjoQhvDTlx3PTw7IfaXzd/ycBK4I6kQD/FJiSfoxMYiKGxGBv3my
KUde4bCPI4vk+ifWdDXDcySjNxsykh0k91g04nELHjKri37LVfhY74oqXvLgCvyP
d0K6Ljl9AgMBAAECggEAJ26BE9Ax14xMV+XSMaiASRKVkSPz3YeKhk+v9GhktibE
QfgEZI/lAE8y2oBFewA9t2K5yyTf4UZQU8UqvbQRlLqtB05pVv7txRaWIamU7YWa
C8GmMecQjKg1DD+uBG9RLvu2veYUap7lDW9vSPl2I/MXK9QjG2eQY0tueXvNI4Tc
u3bMsyPTHQ0GutHHaUa9Zun9GhsQmIE6g8GnG5vrfNYRALg9f5midO530JNT+AXV
hii4ulXzH3BQoILUYc0Vl/d5cyQNLwCaRDqzyFk+vWKP/09lmvHEdYJj59DiTqEG
2i+uu6YlKG+4Y4QzZWtx5t7B9uoiPYDIw1yQal1pAQKBgQDyhXlC85Jr68/qot6B
XBegBCrEqYLTwI/FLL8y+Gzzb5acfBBZZe9Pvt1vcbJp1VT2dOalfEVh2/juP6xZ
tJ3N01N4vR1AdDwCyj1MpNy3YEItzL4jmFS2T/hfCsm8H3f7g3ORMi/zrMD0PHoJ
by32gSM20MTfiaKeq8GN8h2sfQKBgQDxyzJHT1dfy9xKSfYVoggQuvWyvcALpPZu
/JoIX98vlJgqqTZlkv7rcfpRZzlkASK9Qchupex///VMgz1iQN4Ue5GvGSZb5qRj
shqZTh1uzTh108PjvZzO6ooqECcGX4lasIey/TVprRtHJ0O43VB27I01DBjFJSe6
x5IQGAFRAQKBgGyvOEqy0Xmf8kuatdCPLt89PtVnigPPlh6tEPqMrnbiGUMDrmgB
8J9yT9Yzw9r+CddxSDP9XzKd3A8ZZenFsbqd7Bh91/AcpxAxBgulDmz3rHDOAp/9
EmmpqQse0I2IJMMIg/Ab57VyQ/6wY5h6xMRl1xwnrzLmgYROQK2WRYoZAoGAZGsx
fHA1J3HxEWFaNG3Qz7H17L/ljHB8cGe0SRoYBRi/gag5EUJVYM87WKd4LFJUbSlu
5pU+fYJ+C8LNsYqjMPqI7KGTTsOhLk5/wX+xtZzBgB3s0x6ii0TZENMYggsXbnS2
Rt3mWvcrxwdFlvdDPcDMfGWDvAzMTUQpI0n08gECgYEAxNcETQF67PYRO1GpuqqR
c/TAxo8wc1LwWbDH556oAPLzo2ZcQZnN0lfCh2++bsO7XzXMnqWdAMD4R2PbFINS
NlLve8I0XoQOUzRmAE66Uwnjp37jbwpFfBbj2eQwsVxfHQ4xne6qeNZecqc4XsSo
7io3wE5n6iq3fmtAop3/Djc=
-----END PRIVATE KEY-----`);

const bobPublicKey = crypto.createPublicKey(`-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5RAmoM9BqGFA3MrL0JFc
ThnquG/kWZhnMpnpRs+kM9aY5pjwC0Lyc74bh4LJrVEwgvxG6HSoWgtZGxZ+Q5UV
gzyNb5Ewdhe9yVsGvUZXDu/23QrfsbKNgmK2diMfBCeK6ylDknyYTHRsOSvFcUal
n5PgrxJw6fb5tKBD0rD5Uag7ZrW+Xv6cEXGIaMzP1g9G822kAABoeNBPG3tvqog2
+rXSo8I6EIbw05cdz08OyH2l83f8nASuCOpEA/xSYkn6MTGIihsRgb95silHXuGw
jyOL5Pon1nQ1w3MkozcbMpIdJPdYNOJxCx4yq4t+y1X4WO+KKl7y4Ar8j3dCui45
fQIDAQAB
-----END PUBLIC KEY-----`);

// Alice's public key for verification
const alicePublicKey = crypto.createPublicKey(`-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwRh7WnVBBcwdt6vBxl1a
LiOrq2WoJ8R6abDWcY0OIQn3FKkgkcZE69+JKiYX0O0lOjkPfarpytaefEGNPhGV
/yMzgBqpbvbV35s8g3ZRY7K3VUxXovIupEpdk/lWli0vdiiZoUdYaUMSoCN6P/0s
wRciYqiw+gkMxUVXdgMTo36NQD37+zgAsts5Ld+XOyUzYfWBDpeE8HqLfjNjNA8Z
eukuB7AUBrUUN21f7Lpx7VxFCQFHcPy378MK5J6wDW3+8V6bbAr0qL1eLsaJr6FM
wKyTzL2Wm5hXBOGVwOrNv8VTdQnDq7eUJjQ7e71f8kikkOvG6JT3obKStwBexcJe
FwIDAQAB
-----END PUBLIC KEY-----`);


const ciphertextHex = "876b1dfa594a791886c4ee8b654c5c68ce326131fb8d4600a62c19154f9d0899be34126ffc58be32e22aed80a319a171b546d6cb81060737fb8b852c6001ef53bfc9c1b974f16670074ebb08be998c1935895fedbc286db645f294283da9208e772f73d1e7c44ab301a0c1096242259c5b347e5f2d0778c19e916cf3454155c565055d7a669ebb0c85aea327557e7def6e76f98ca1bdf50b35f8843d0c078e28ad483a5e5d16d9379d0b9e679f4889e084832b9cb47dd58b1be1b517097027c3edcd894ab45dbabce8dd03125497102a123cc2c3a5aae9d1d9cc8a9945862bdeddb3f1bd0b0fb34e44b5091f6976d8042d28c17aecf2697580ce24c9a7d396dc";
const ciphertext = Buffer.from(ciphertextHex, "hex");

const recoveredPlaintext = crypto.privateDecrypt(bobPrivateKey, ciphertext);
console. log("Recovered Plaintext:", recoveredPlaintext.toString ("utf8"));

const signatureHex = "6cd2c789e6642978586d5753ff1c253382725b7ac61b0d024e2273bf2c5b6bf7dd1b6a763d58f1228218976a2454bc5fcdbeb0f639e14d7517249fd60e5d0287d7241f4c20e98c62aa45e4b756dbcdd1b5e7e99d5e24191e4d6faefd59986985fcf1f932998b89b08e511dccafd3517b158b138f0153898559f0748dffb2002971929ee8c5323b5a4291654251f8aefd609f6be4a851a07de263e464580ed09743f6eb848a64e40ec1d1f423b5ac150e39d0512028b2e598b81b2e228331b8d5919f81a2ae83ff243ea318d5f52aad2d5fe8ce380a82d88eb30fa3a3f238fc9be870dc198086c967d34069dd61f665fbdcaa6226ac80be7e8cb3ed3b856d8a87";
const signature = Buffer.from(signatureHex, "hex");

const isValid = crypto.verify("sha256", recoveredPlaintext, alicePublicKey, signature);
console. log ("RSA signature verified:", isValid);


